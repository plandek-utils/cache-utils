{"version":3,"sources":["../src/mod.ts"],"sourcesContent":["import type { KeyValueCache, KeyValueCacheSetOptions } from \"@apollo/utils.keyvaluecache\";\nimport { RedisDeletionMethod, redisDelByPattern } from \"@eturino/ioredis-del-by-pattern\";\nimport type { PlainObject } from \"@plandek-utils/plain-object\";\nimport type { Redis } from \"ioredis\";\n\n/**\n * Function to delete keys by pattern.\n */\nexport type DelFn = typeof redisDelByPattern;\n\n/**\n * Util to generate the prefix for the main cache of a client.\n *\n * @param clientKey\n * @returns `ck-${clientKey}|`\n */\nexport function clientMainCachePrefix(clientKey: string): string {\n  return `ck-${clientKey}|`;\n}\n\ntype ConstructorParams = {\n  /**\n   * Redis client\n   */\n  redis: Redis;\n\n  /**\n   * Function to delete keys by pattern.\n   * If not present, then `redisDelByPattern` from `@eturino/ioredis-del-by-pattern` will be used\n   *\n   * @see redisDelByPattern\n   */\n  delFn?: DelFn;\n\n  /**\n   * Mandatory prefix for all the keys in this cache, which will be prepended to all keys in REDIS\n   */\n  keyPrefix: string;\n\n  /**\n   * Default TTL for cache entries in seconds\n   */\n  defaultTTLSeconds: number;\n\n  /**\n   * If true, it will be sent to the delFn when cleaning the cache\n   */\n  enableLog: boolean;\n};\n\n/**\n * uses ioredis directly to implement a redis cache that can be cleaned by pattern\n */\nexport class CleanableRedisCache implements KeyValueCache<string> {\n  readonly delFn: DelFn;\n  readonly redis: Redis;\n  readonly keyPrefix: string;\n  readonly defaultCacheTTL: number;\n  readonly enableLog: boolean;\n\n  constructor(opts: ConstructorParams) {\n    const { delFn, enableLog, keyPrefix, defaultTTLSeconds, redis } = opts;\n    this.redis = redis;\n    this.keyPrefix = keyPrefix;\n    this.defaultCacheTTL = defaultTTLSeconds;\n    this.enableLog = enableLog;\n\n    this.delFn = delFn || redisDelByPattern;\n  }\n\n  /**\n   * Disconnects the redis client\n   */\n  public disconnect(): void {\n    this.redis.disconnect();\n  }\n\n  /**\n   * Loads the value from the cache (STRING) or undefined if not found\n   *\n   * @param givenKey Key to identify the cache entry\n   * @returns\n   */\n  public async get(givenKey: string): Promise<string | undefined> {\n    const key = this.finalKeyFor(givenKey);\n    const value = await this.redis.get(key);\n\n    return isNil(value) ? undefined : value;\n  }\n\n  /**\n   * Deletes the cache entry using `redis.unlink`.\n   *\n   * Calls `finalKeyFor` to get the final key to be used in REDIS.\n   *\n   * @param givenKey Key to identify the cache entry\n   */\n  public async delete(givenKey: string): Promise<boolean | undefined> {\n    const key = this.finalKeyFor(givenKey);\n    const result = await this.redis.unlink(key);\n    return result > 0 ? true : undefined;\n  }\n\n  /**\n   * Sets a value in the cache for the given key, using `redis.set` with `PX`.\n   *\n   * Calls `finalKeyFor` to get the final key to be used in REDIS.\n   *\n   * It does nothing if the value is `undefined`.\n   *\n   * @param givenKey Key to identify the cache entry\n   * @param value Value to be stored in the cache\n   * @param options Options for the cache entry\n   * @param options.ttl TTL to use instead of the default this.defaultCacheTTL\n   */\n  public async set(givenKey: string, value: string, options?: KeyValueCacheSetOptions): Promise<void> {\n    if (typeof value === \"undefined\") {\n      return;\n    }\n\n    const key = this.finalKeyFor(givenKey);\n    const ttlSeconds = options?.ttl ?? this.defaultCacheTTL;\n    await this.redis.set(key, value, \"PX\", ttlSeconds * 1000);\n  }\n\n  /**\n   * Clears all the cache entries for this cache.\n   */\n  public clearAll(): Promise<number> {\n    return this.clean(\"\");\n  }\n\n  /**\n   * Clears all the response entries (fqc:*) for this cache.\n   *\n   * It is the prefix added by the Apollo Server cache plugin\n   */\n  public clearResponseCache(): Promise<number> {\n    return this.clean(\"fqc:\"); // prefix added by the Apollo Server cache plugin\n  }\n\n  /**\n   * Clears all the cache entries for the given client.\n   *\n   * Uses `clientMainCachePrefix` to generate the prefix.\n   *\n   * @param clientKey\n   * @returns the number of entries cleared\n   * @see clientMainCachePrefix\n   */\n  public clearClient(clientKey: string): Promise<number> {\n    return this.clean(clientMainCachePrefix(clientKey));\n  }\n\n  /**\n   * Clears all the cache entries for the given prefix.\n   *\n   * @param prefix\n   * @returns the number of entries cleared\n   */\n  public clearPrefix(prefix: string): Promise<number> {\n    return this.clean(prefix);\n  }\n\n  /**\n   * Deletes all cache entries using `delFn` with the given prefix, using `unlink` with Pipeline.\n   *\n   * Calls `finalKeyFor` to get the final pattern to be used in REDIS.\n   *\n   * @param prefix\n   * @returns the number of entries cleared\n   */\n  protected clean(prefix: string): Promise<number> {\n    return this.delFn({\n      pattern: `${this.finalKeyFor(prefix)}*`,\n      redis: this.redis,\n      deletionMethod: RedisDeletionMethod.unlink,\n      withPipeline: true,\n      enableLog: this.enableLog,\n    });\n  }\n\n  protected finalKeyFor(key: string): string {\n    return `${this.keyPrefix}${key}`;\n  }\n}\n\n/**\n * returns a DISCONNECTED CleanableRedisCache, useful for tests.\n */\nexport function disconnectedCleanableRedisCache(redis: Redis, delFn?: DelFn): CleanableRedisCache {\n  const c = new CleanableRedisCache({\n    redis,\n    delFn,\n    defaultTTLSeconds: 0,\n    enableLog: false,\n    keyPrefix: \"<test>\",\n  });\n  c.disconnect();\n  return c;\n}\n\n/**\n * Adaptor for a KeyValueCache<string> to KeyValueCache<PlainObject>, using JSON.parse and JSON.stringify\n */\nexport class PlainObjectCache implements KeyValueCache<PlainObject> {\n  constructor(readonly cache: KeyValueCache<string>) {}\n\n  /**\n   * Calls `cache.get` with the given key and parses the value as JSON if it is truthy, undefined otherwise.\n   * @param key\n   * @returns\n   */\n  public async get(key: string): Promise<PlainObject | undefined> {\n    const value = await this.cache.get(key);\n    return value ? JSON.parse(value) : undefined;\n  }\n\n  /**\n   * Calls `cache.set` with the given key and value, stringifying the value.\n   * @param key\n   * @param value\n   * @param options\n   * @returns\n   */\n  public set(key: string, value: PlainObject, options?: KeyValueCacheSetOptions): Promise<void> {\n    return this.cache.set(key, JSON.stringify(value), options);\n  }\n\n  /**\n   * Calls `cache.delete` with the given key.\n   * @param key\n   * @returns\n   */\n  public async delete(key: string): Promise<boolean | undefined> {\n    const result = await this.cache.delete(key);\n    // Ensure we return either boolean or undefined, not void\n    return typeof result === \"boolean\" ? result : undefined;\n  }\n}\n\n/**\n * KeyValueCache that does nothing, useful for tests or to disable cache with minimal impact.\n */\nexport class NoOpCache<T = unknown> implements KeyValueCache<T> {\n  /**\n   * Always returns `undefined`\n   * @returns Promise<undefined>\n   */\n  get(_key: string): Promise<T | undefined> {\n    return Promise.resolve(undefined);\n  }\n\n  /**\n   * Does nothing\n   * @returns Promise<void>\n   */\n  set(_key: string, _value: T, _options?: KeyValueCacheSetOptions | undefined): Promise<void> {\n    return Promise.resolve();\n  }\n\n  /**\n   * Does nothing\n   * @returns Promise<void>\n   */\n  delete(_key: string): Promise<boolean | undefined> {\n    return Promise.resolve(false);\n  }\n}\n\n// INTERNAL\n\nfunction isNil(value: unknown): value is null | undefined {\n  return value === undefined || value === null;\n}\n"],"mappings":"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","names":[]}